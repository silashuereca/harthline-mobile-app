create type "public"."invite_status" as enum ('invited', 'invite_accepted', 'invite_rejected');

create type "public"."member_role" as enum ('owner', 'editor');

drop policy "Enable delete for users based on house_id" on "public"."budget_expenses";

drop policy "Enable insert for users based on house_id" on "public"."budget_expenses";

drop policy "Enable update for users based on house_id" on "public"."budget_expenses";

drop policy "Enable users to view data based on house_id" on "public"."budget_expenses";

drop policy "Enable delete for users based on house_id" on "public"."budget_items";

drop policy "Enable insert for users based on house_id" on "public"."budget_items";

drop policy "Enable update for users based on house_id" on "public"."budget_items";

drop policy "Enable users to view data based on house_id" on "public"."budget_items";

drop policy "Enable insert for users based on house_id" on "public"."budget_months";

drop policy "Enable users to view data based on house_id" on "public"."budget_months";

create table "public"."house_members" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "house_id" bigint not null,
    "member_id" uuid not null,
    "role" member_role not null
);


alter table "public"."house_members" enable row level security;

CREATE UNIQUE INDEX house_members_pkey ON public.house_members USING btree (id);

alter table "public"."house_members" add constraint "house_members_pkey" PRIMARY KEY using index "house_members_pkey";

alter table "public"."house_members" add constraint "house_members_house_id_fkey" FOREIGN KEY (house_id) REFERENCES houses(id) not valid;

alter table "public"."house_members" validate constraint "house_members_house_id_fkey";

alter table "public"."house_members" add constraint "house_members_user_id_fkey" FOREIGN KEY (member_id) REFERENCES auth.users(id) not valid;

alter table "public"."house_members" validate constraint "house_members_user_id_fkey";

grant delete on table "public"."house_members" to "anon";

grant insert on table "public"."house_members" to "anon";

grant references on table "public"."house_members" to "anon";

grant select on table "public"."house_members" to "anon";

grant trigger on table "public"."house_members" to "anon";

grant truncate on table "public"."house_members" to "anon";

grant update on table "public"."house_members" to "anon";

grant delete on table "public"."house_members" to "authenticated";

grant insert on table "public"."house_members" to "authenticated";

grant references on table "public"."house_members" to "authenticated";

grant select on table "public"."house_members" to "authenticated";

grant trigger on table "public"."house_members" to "authenticated";

grant truncate on table "public"."house_members" to "authenticated";

grant update on table "public"."house_members" to "authenticated";

grant delete on table "public"."house_members" to "service_role";

grant insert on table "public"."house_members" to "service_role";

grant references on table "public"."house_members" to "service_role";

grant select on table "public"."house_members" to "service_role";

grant trigger on table "public"."house_members" to "service_role";

grant truncate on table "public"."house_members" to "service_role";

grant update on table "public"."house_members" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."budget_expenses"
as permissive
for delete
to public
using ((house_id = (( SELECT settings.selected_house_id
   FROM settings
  WHERE (settings.user_id = auth.uid())))::numeric));


create policy "Enable insert for users based on user_id"
on "public"."budget_expenses"
as permissive
for insert
to public
with check ((house_id = (( SELECT settings.selected_house_id
   FROM settings
  WHERE (settings.user_id = auth.uid())))::numeric));


create policy "Enable update for users based on user_id"
on "public"."budget_expenses"
as permissive
for update
to authenticated
using ((house_id = (( SELECT settings.selected_house_id
   FROM settings
  WHERE (settings.user_id = auth.uid())))::numeric));


create policy "Enable users to view their own data only"
on "public"."budget_expenses"
as permissive
for select
to authenticated
using ((house_id = (( SELECT settings.selected_house_id
   FROM settings
  WHERE (settings.user_id = auth.uid())))::numeric));


create policy "Enable delete for users based on user_id"
on "public"."budget_items"
as permissive
for delete
to public
using ((house_id = (( SELECT settings.selected_house_id
   FROM settings
  WHERE (settings.user_id = auth.uid())))::numeric));


create policy "Enable insert for users based on user_id"
on "public"."budget_items"
as permissive
for insert
to public
with check ((house_id = (( SELECT settings.selected_house_id
   FROM settings
  WHERE (settings.user_id = auth.uid())))::numeric));


create policy "Enable update for users based on user_id"
on "public"."budget_items"
as permissive
for update
to authenticated
using ((house_id = (( SELECT settings.selected_house_id
   FROM settings
  WHERE (settings.user_id = auth.uid())))::numeric));


create policy "Enable users to view their own data only"
on "public"."budget_items"
as permissive
for select
to authenticated
using ((house_id = (( SELECT settings.selected_house_id
   FROM settings
  WHERE (settings.user_id = auth.uid())))::numeric));


create policy "Enable insert for authenticated users only"
on "public"."budget_months"
as permissive
for insert
to authenticated
with check ((house_id = (( SELECT settings.selected_house_id
   FROM settings
  WHERE (settings.user_id = auth.uid())))::numeric));


create policy "Enable users to view their own data only"
on "public"."budget_months"
as permissive
for select
to authenticated
using ((house_id = (( SELECT settings.selected_house_id
   FROM settings
  WHERE (settings.user_id = auth.uid())))::numeric));



