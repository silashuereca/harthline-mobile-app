create table "public"."houses" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "owner_id" uuid not null default auth.uid()
);


alter table "public"."houses" enable row level security;

CREATE UNIQUE INDEX houses_pkey ON public.houses USING btree (id);

alter table "public"."houses" add constraint "houses_pkey" PRIMARY KEY using index "houses_pkey";

alter table "public"."houses" add constraint "houses_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES auth.users(id) not valid;

alter table "public"."houses" validate constraint "houses_owner_id_fkey";

grant delete on table "public"."houses" to "anon";

grant insert on table "public"."houses" to "anon";

grant references on table "public"."houses" to "anon";

grant select on table "public"."houses" to "anon";

grant trigger on table "public"."houses" to "anon";

grant truncate on table "public"."houses" to "anon";

grant update on table "public"."houses" to "anon";

grant delete on table "public"."houses" to "authenticated";

grant insert on table "public"."houses" to "authenticated";

grant references on table "public"."houses" to "authenticated";

grant select on table "public"."houses" to "authenticated";

grant trigger on table "public"."houses" to "authenticated";

grant truncate on table "public"."houses" to "authenticated";

grant update on table "public"."houses" to "authenticated";

grant delete on table "public"."houses" to "service_role";

grant insert on table "public"."houses" to "service_role";

grant references on table "public"."houses" to "service_role";

grant select on table "public"."houses" to "service_role";

grant trigger on table "public"."houses" to "service_role";

grant truncate on table "public"."houses" to "service_role";

grant update on table "public"."houses" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."houses"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable update if you're the owner"
on "public"."houses"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = owner_id));


create policy "Enable users to view their own data only"
on "public"."houses"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = owner_id));



